Requirements:
  - kind and kubectl already installed
 
# kubectl installation
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl

chmod +x ./kubectl

sudo mv ./kubectl /usr/local/bin/kubectl

kubectl version --client


# kind installation
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-amd64

chmod +x ./kind

sudo mv ./kind /usr/local/bin/kind



Day 1
Goal: Create cluster and pod using kind and kubectl

Step 1 - Create the cluster
kind create cluster --config my-first-cluster.yaml

Step 2 - List the clusters
kind get clusters

Step 3 - List the nodes
kubectl get nodes

Step 4 - Create the manifest file
kubectl run nginx-giropops --image nginx --port 80 --dry-run=client -o yaml > my-first-pod.yaml
Note: If the manisfest file already exists you can skip this step.

Step 5 - Remove the following fields from manisfest
creationTimestamp: null
resources: {}
status: {}

Step 6 - Create the pod applying the manisfest file
kubectl apply -f my-first-pod.yaml

Step 7 - List the pods
kubectl get pods
Note: Check if the STATUS column is Running and READY column is 1/1

Step 8 - Execute the command below to see details about the pod and check the containers
kubectl describe pods nginx-giropops

Step 9 - Access the container
kubectl exec nginx-giropops -c nginx-giropops -it -- bash

Step 10 - Inside the container type the following command:
curl localhost

Step 11 - In this point, you will be able to see the Welcome Message from Nginx
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

Day 2
Goal: create pod with two containers using resource limits/request and volumes

Step 1 - Create the namespace using the manifest file
kubectl apply -f namespace.yaml

Step 2 - List the namespaces
kubectl get namespaces

Step 3 - Create the pod using the manifest file
kubectl apply -f pod-resources-volumes.yaml

Step 4 - List the pod by namespace
kubectl get pods -n giropops-ns

Step 5 - Check the details using command describe
kubectl describe pods giropops-day2 -n giropops-ns

Step 6 - Access the containers
kubectl exec giropops-day2 -c giropops1 -it -n giropops-ns -- bash
kubectl exec giropops-day2 -c giropops2 -it -n giropops-ns -- bash

Step 7 - Foreach container create the log file inside folders audit-nginx and audit-ubuntu
cd audit-nginx 
echo "Test nginx log" > nginx.log

cd audit-ubuntu 
echo "Test ubuntu log" > ubuntu.log

Step 8 - Check the node where the pod are running
kubectl get pods giropops-day2 -n giropops-ns -o wide

Step 9 - Check the pod uid
kubectl get pods giropops-day2 -n giropops-ns -o jsonpath='{.metadata.uid}'

Step 10 - List the nodes and access it using docker exec regarding Step 8
docker container exec -it {containerUid} bash

Step 11 - Access the following directory based on pod uid
cd /var/lib/kubelet/pods/{podUid}/volumes/kubernetes.io~empty-dir

Step 12 - Check if the volumes were created and the files are not empty
giropops1-vol/nginx.log
giropops2-vol/ubuntu.log

Step 13 - Destroy the namespace and pod
kubectl delete -f namespace.yaml

Step 14 - Check if the volume were deleted from this directory
/var/lib/kubelet/pods/{podUid}/volumes
